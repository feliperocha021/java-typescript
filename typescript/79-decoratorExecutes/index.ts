// Os decorators de classe, propriedade de classe, parametro e met√≥do s√£o executados simultaneamente
// Avalia√ß√£o das express√µes (A(), B(), C()) ‚Üí de cima para baixo
// Execu√ß√£o dos decorators retornados ‚Üí de baixo para cima A(B(C(method)))
// decorators de parametros - esq p/ dir; decorators de met√≥dos cima p/ baixo

/* üß≠ Ordem de execu√ß√£o dos decorators
Quando voc√™ define uma classe com m√∫ltiplos decorators, a ordem de execu√ß√£o √©:

1 Par√¢metros de inst√¢ncia (de baixo para cima, por √≠ndice)

2 Par√¢metros de m√©todos est√°ticos

3 Decorators de propriedades de inst√¢ncia

4 Decorators de propriedades est√°ticas

5 Decorators de m√©todos de inst√¢ncia

6 Decorators de m√©todos est√°ticos

7 Decorator da classe

- eles s√£o executados de dentro para fora e 
de baixo para cima, respeitando essa hierarquia.
*/

function CLS_DECORATOR(target: any){
    console.log('CLASS DECORATOR CALLED!');
}

function PROP_DECORATOR(target: any, propertyKey: string): any{
    console.log('PROPERTY DECORATOR CALLED!');
}

function ACC_DECORATOR(target: any, name: string, descriptor: PropertyDescriptor){
    console.log('ACCESSOR DECORATOR CALLED');
}

function PARAM_DECORATOR(target: any, paramName: string, index: number){
    console.log('PARAMETER DECORATOR CALLED');
}

function METH_DECORATOR(target: any, methodName: string, descriptor: PropertyDescriptor){
    console.log('METHOD DECORATOR CALLED!');
}

@CLS_DECORATOR
class Person{
    @PROP_DECORATOR
    name: string;

    constructor(n: string){
        this.name = n;
    }

    @METH_DECORATOR
    calculateAge(@PARAM_DECORATOR dob: string){
        //calculate date of birth;
    }
}

export default undefined;

